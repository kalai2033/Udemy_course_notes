Spreadsheets are used for

small datasets

quick charts

can be used by untrained people





whereas SQL is used



for large datasets

integrity

easy to combine datasets

can be used to automate the use cases

useful for large website and applications



SELECT DISTINCT rating FROM film;

SELECT count(DISTINCT amount)  FROM payment;

SELECT * FROM customer
where first_name = 'Jared';

SELECT count(*) FROM film
WHERE rental_rate > 4 AND replacement_cost >= 19.99
and rating='R';

SELECT email FROM CUSTOMER 
WHERE first_name = 'Nancy' AND last_name = 'Thomas';

SELECT description FROM film
WHERE title='Outlaw Hanky';

SELECT phone FROM address
WHERE address = '259 Ipoh Drive';

SELECT customer_id FROM payment
ORDER BY payment_date
LIMIT 10;

SELECT title FROM film
ORDER BY length
LIMIT 5;

SELECT count(title) FROM film
WHERE length <= 50 ;

 SELECT * FROM payment
 WHERE payment_date
 BETWEEN '2007-02-14' AND '2007-02-21'
 ORDER BY payment_date DESC;

SELECT * FROM CUSTOMER 
WHERE first_name IN ('John','JAKE','Julie');

SELECT * FROM customer
WHERE first_name LIKE 'A%' AND last_name NOT LIKE 'B%'
ORDER BY last_name;

Challenge 

SELECT COUNT(*) FROM payment
WHERE amount > 5.00;

SELECT COUNT(*) FROM actor
WHERE first_name LIKE 'P%';

SELECT COUNT(DISTINCT district) FROM address;

SELECT DISTINCT district FROM address;

SELECT count(*) FROM film
WHERE rating = 'R' and replacement_cost BETWEEN 5 and 15;

SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%';



Like (case sensitive) and ILike(case insensitive)

Two wildcards

_  (only one character) and %(any no of characters)

WHEREÂ name LIKE '_her%'

Cheryl

Theresa

Sherri



GROUP BY Challenge


1) SELECT staff_id,count(*) FROM payment
WHERE staff_id in (1,2)
GROUP BY staff_id;

2)  SELECT rating, AVG(replacement_cost) FROM film
GROUP BY rating;

3)  SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5; 


HAVING Challenge

 1) SELECT customer_id,COUNT(amount) FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >=  40
ORDER BY COUNT(amount);

2) SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100;

Milestone 1 Challenge

1) SELECT customer_id FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) >=110;

2) SELECT COUNT(*) from film
WHERE title LIKE 'J%';

3) SELECT first_name,last_name FROM customer
WHERE first_name LIKE 'E%' and address_id < 500
ORDER BY customer_id DESC
LIMIT 1;


Joins

1) SELECT email FROM customer
JOIN address
ON customer.address_id = address.address_id
WHERE address.district = 'California';

2) SELECT title FROM film
JOIN film_actor 
ON film.film_id = film_actor.film_id
JOIN actor
ON film_actor.actor_id = actor.actor_id
WHERE actor.first_name = 'Nick' 
AND actor.last_name = 'Wahlberg';

3) SELECT DISTINCT title FROM film
JOIN film_actor 
ON film.film_id = film_actor.film_id
WHERE film.film_id in (SELECT film_id FROM film_actor
WHERE actor_id in (SELECT actor_id FROM actor
WHERE first_name = 'Nick' AND 
last_name = 'Wahlberg'));


Advanced sql commands


SELECT AGE(payment_date) FROM
payment;

DATE functions

SELECT TO_CHAR(payment_date, 'DAY')
FROM payment;

SELECT NOW();
SELECT TO_CHAR(payment_date, 'DAY') AS "Day",
COUNT(*) FROM payment
GROUP BY "Day";

SELECT COUNT(*)
FROM payment
WHERE EXTRACT(dow from payment_date) = 1;

Sub query with where exists

SELECT first_name,last_name
FROM customer AS c
WHERE EXISTS
(SELECT * FROM payment AS p
WHERE p.customer_id = c.customer_id
AND amount > 11)

Inner join

SELECT f1.title, f2.title , f1.length
FROM film AS f1
JOIN film AS f2 
ON f1.film_id != f2.film_id
AND f1.length = f2.length;



Milestone 2


1) SELECT * FROM cd.facilities;

2) SELECT name, membercost
FROM cd.facilities;

3) SELECT *
FROM cd.facilities
WHERE membercost != 0;

4) SELECT facid, name, membercost, monthlymaintenance
FROM cd.facilities
WHERE membercost != 0
AND membercost < (monthlymaintenance/50);

5) SELECT *
FROM cd.facilities
WHERE name LIKE '%Tennis%';

6) SELECT *
FROM cd.facilities
WHERE facid IN (1,5);

7)  SELECT memid, surname, firstname, joindate
FROM cd.members
WHERE joindate > '2012-08-31';

8) SELECT DISTINCT surname FROM cd.members
ORDER BY surname
LIMIT 10;

9) SELECT MAX(joindate) FROM cd.members;

10) SELECT count(*) FROM cd.facilities
WHERE guestcost >= 10;

11) SELECT facid, SUM(slots) FROM cd.bookings
WHERE EXTRACT(MONTH FROM starttime) = 9
GROUP BY facid 
ORDER BY SUM(slots);

12)  SELECT facid, SUM(slots) AS tot_slots FROM cd.bookings
GROUP BY facid
HAVING SUM(slots) > 1000
ORDER BY facid;

13)  SELECT bk.starttime, fc.name FROM cd.bookings AS bk
JOIN cd.facilities AS fc
on bk.facid = fc.facid
WHERE date_trunc('day',bk.starttime) = '2012-09-21'
AND fc.name LIKE 'Tennis Court _'
ORDER BY bk.starttime,fc.name;

14)  SELECT bk.starttime, mem.firstname || ' ' || mem.surname as fullname
FROM cd.bookings as bk
JOIN cd.members as mem
ON mem.memid = bk.memid
WHERE mem.firstname = 'David' AND mem.surname = 'Farrell';


*********************************

CREATE, UPDATE AND DELETE

CREATE TABLE account(
user_id SERIAL PRIMARY KEY,
username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP

);

CREATE TABLE job(
job_id SERIAL PRIMARY KEY,
job_name VARCHAR(200) UNIQUE NOT NULL );

CREATE TABLE account_job(
 user_id INTEGER REFERENCES account(user_id),
	job_id INTEGER REFERENCES job(job_id),
	hire_date TIMESTAMP
)


SELECT * FROM account;
SELECT * FROM job;
SELECT * FROM account_job;
INSERT INTO account(username,password,email,created_on)
VALUES
('Kalai','pass','kalai@mail.com',CURRENT_TIMESTAMP);


INSERT INTO job(job_name)
VALUES ('Data Analyst');


INSERT INTO account_job(user_id,job_id,hire_date)
VALUES
(1,2,CURRENT_TIMESTAMP);


UPDATE account
SET last_login = CURRENT_TIMESTAMP 
WHERE last_login IS null;


UPDATE account
SET last_login = created_on;

UPDATE account_job
SET hire_date = account.created_on
FROM account
WHERE account_job.user_id = account.user_id;

UPDATE account
SET last_login = CURRENT_TIMESTAMP
RETURNING email,created_on,last_login;

DELETE FROM job
WHERE job_name = 'PLAYBOY'
RETURNING job_id,job_name;

DELETE FROM job
USING account_job
WHERE job.job_id = account_job.job_id;

WITH ALTER COMMAND
1) ADD,DROP OR RENAME COLUMNS
2) ALTER COLUMN DATA TYPE
3) SET DEFAULT VALUES FOR COLUMN
4) ADD CHECK CONSTRAINTS
5) RENAME TABLE


ALTER TABLE infomation
RENAME TO information;

ALTER TABLE information
RENAME COLUMN person TO people;


INSERT INTO information(title)
VALUES ('SS');


ALTER TABLE information
ALTER COLUMN people SET NOT NULL;


ALTER TABLE information
ALTER COLUMN people DROP NOT NULL;

ALTER TABLE account
ALTER COLUMN email TYPE VARCHAR(250);



ALTER TABLE information
DROP COLUMN people;


ALTER TABLE information
DROP COLUMN IF EXISTS people;


CHECK CONSTRAINT


CREATE TABLE employee(
  emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	birthday DATE CHECK (birthday > '1900-01-01'),
	hire_date DATE CHECK (hire_date > birthday),
	salary INTEGER CHECK (salary > 0));

SELECT * FROM EMPLOYEE;

INSERT INTO employee(
	first_name,last_name,birthday,hire_date,salary)
VALUES ('kalai','PAN','1994-07-11','2020-10-05',2500);




Milestone Challenge 3


CREATE TABLE students(
 student_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	homeroom_number BIGINT UNIQUE,
	phone TEXT NOT NULL UNIQUE,
	email TEXT UNIQUE,
	graduation_year DATE );

CREATE TABLE teachers(
teacher_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	homeroom_number BIGINT UNIQUE,
	department TEXT NOT NULL UNIQUE,
	email TEXT UNIQUE,
	phone TEXT NOT NULL UNIQUE
);


INSERT INTO students(first_name,last_name,phone,graduation_year,homeroom_number)
VALUES ('Mark','Watney','777-555-1234',to_date('2035', 'YYYY'),'5');

INSERT INTO teachers(first_name,last_name,phone,department,email,homeroom_number)
VALUES ('Jonas','Salk','777-555-4321','Biology','jsalk@school.org','5');


ALTER TABLE students
ALTER COLUMN email DROP NOT NUll;

DROP TABLE teachers;


SELECT * FROM teachers;
SELECT * FROM students;


************************

CASE

SELECT customer_id,
CASE 
	WHEN (customer_id <= 100) THEN 'Premium'
	WHEN (customer_id BETWEEN 100 and 200) THEn 'Plus'
	ELSE 'Normal'
END AS cus_type
FROM customer
ORDER BY customer;


CASE EXPRESSION

SELECT customer_id,
CASE customer_id	
	WHEN  2 THEN 'Winner'
	WHEN 5 THEN 'Runner'
	ELSE 'Normal'
END AS cus_type
FROM customer 
ORDER BY customer;


SELECT 
SUM(CASE rental_rate
	WHEN 0.99 THEN 1
	ELSE 0
END) AS bargains1,
SUM(CASE rental_rate
	WHEN 2.99 THEN 1
	ELSE 0
END) AS bargains2,
SUM(CASE rental_rate
	WHEN 4.99 THEN 1
	ELSE 0
END) AS bargains3
FROM film;


Challenge

SELECT 
SUM(CASE rating 
   WHEN 'R' THEN 1
   ELSE 0
END) AS r,
SUM(CASE rating 
   WHEN 'PG' THEN 1
   ELSE 0
END) AS PG,
SUM(CASE rating 
   WHEN 'PG-13' THEN 1
   ELSE 0
END) AS PG13
FROM film;


COALESCE

It is helpful when querying table
with NULL value and sub with
another value.

 SELECT item,(price- COALESCE(discount,0)) AS final_price
 FROM table

CAST

function
SELECT CAST('5' AS INTEGER)
operator
SELECT '5'::INTEGER

SELECT CHAR_LENGTH(CAST(inventory_id AS VARCHAR)) FROM rental;


NULLIF


CREATE TABLE depts(
first_name VARCHAR(50),
department VARCHAR(50));

INSERT INTO depts(
first_name,department)
VALUES ('Vin','A'),('LAu','A'),('CLa','B');



SELECT * FROM depts;

SELECT (
SUM(CASE WHEN department = 'A' THEN 1 ELSE 0 END)/
	SUM(CASE WHEN department = 'B' THEN 1 ELSE 0 END))
AS department_ratio
FROM depts

DELETE FROM depts
WHERE department = 'B';

SELECT (
SUM(CASE WHEN department = 'A' THEN 1 ELSE 0 END)/
	SUM(CASE WHEN department = 'B' THEN 1 ELSE 0 END))
AS department_ratio
FROM depts

returns division by zero error

SELECT (
SUM(CASE WHEN department = 'A' THEN 1 ELSE 0 END)/
	NULLIF(SUM(CASE WHEN department = 'B' THEN 1 ELSE 0 END),0))
AS department_ratio
FROM depts

returns NULL

Views are stored querys accessed from
a virtual table




VIEWS


CREATE VIEW customer_info AS
SELECT first_name, last_name, address FROM customer
JOIN address 
ON address.address_id = customer.address_id;



SELECT * FROM customer_info;


CREATE OR REPLACE VIEW customer_info AS
SELECT first_name, last_name, address,district FROM customer
JOIN address 
ON address.address_id = customer.address_id;


DROP VIEW IF EXISTS customer_info;


ALTER VIEW customer_info RENAME
TO c_info;

**************************************

Fresh energy Challenge

1)	The TOP 10 households with the highest total number of appliances


SELECT meter,SUM(count) FROM appliance_data 
GROUP BY meter
ORDER BY SUM(count) DESC
LIMIT 10;

2) The mean power consumption per week of the TOP 10 households 
with the highest total number of appliances

SELECT meter,AVG(power) FROM energy_data
WHERE meter IN (SELECT * FROM 
                (SELECT meter FROM appliance_data 
GROUP BY meter
ORDER BY SUM(count) DESC 
LIMIT 10) AS t) 
GROUP BY meter
ORDER BY AVG(power) DESC
;

OR

SELECT a.meter, AVG(b.power) FROM (SELECT meter,SUM(count) as ct FROM appliance_data 
GROUP BY meter
ORDER BY SUM(count) DESC
LIMIT 10) AS a JOIN energy_data AS b
ON a.meter = b.meter
GROUP BY meter
ORDER BY a.ct DESC
;



3) The total energy consumed by the TOP 10 households with 
the highest total number of appliances in 2019


SELECT meter, MAX(ROUND(energy,2)) AS tot FROM energy_data
WHERE meter IN (SELECT * FROM 
                (SELECT meter FROM appliance_data 
GROUP BY meter
ORDER BY SUM(count) DESC 
LIMIT 10) AS t) AND rec_time LIKE '%2019%'
GROUP BY meter
ORDER BY tot DESC;


4) The mean power consumption per week of the customers who have kettles
SELECT energy_data.meter,AVG(power) FROM energy_data
JOIN appliance_data ON
energy_data.meter = appliance_data.meter
WHERE appliance_data.appliance_id = 'KETTLE'
GROUP BY energy_data.meter;


5) The energy consumed per week per customer (remember that energy is cumulative)

SELECT a.meter,a.rec_time,COALESCE((a.energy - b.energy), a.energy) 
AS energy_consumed_per_week FROM energy_data
AS A LEFT JOIN energy_data AS b on a.meter = b.meter 
AND date(b.rec_time) = date(DATE_SUB(a.rec_time,INTERVAL 1 WEEK)) 
GROUP BY a.meter,a.rec_time,b.rec_time



6) The amount of energy consumed per customer, from the day they joined fresh to the last day recorded in our database

SELECT meter,MAX(ROUND(energy,2)) - MIN(ROUND(energy,2)) 
as Energy_consumed_from_day1 from energy_data group by meter;